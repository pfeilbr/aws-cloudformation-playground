AWSTemplateFormatVersion: 2010-09-09
Description: S3 Example

Resources: 

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'           

  MyLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
          exports.handler = async (event, context, callback) => {
              return JSON.stringify(event, null, 2);
          };
      Runtime: "nodejs12.x"
      Timeout: "25"

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  MyEventBridgeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: translate.lambdaHandler
      Policies:
        - ComprehendBasicAccessPolicy: {}
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'translate:TranslateText'
              Resource: '*'
      Events:
        TranslateFilter:
          Type: EventBridgeRule
          Properties:
            # Input: String '{"Key": "Value"}' Data that is sent to target, if used, event is not sent
            # InputPath: String path to part of event desired
            EventBusName: !Ref CustomBus
            Pattern:
              source:
                - "TextEndpoint"
              detail-type:
                - "translate"

  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            Fn::GetAtt:
              - "MyQueue1"
              - "Arn"
          Protocol: "sqs"
        - Endpoint:
            Fn::GetAtt:
              - "MyQueue2"
              - "Arn"
          Protocol: "sqs"
      TopicName: "SampleTopic"

  DetectionSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: ID-GD-Topic-Policy
        Version: '2012-10-17'
        Statement:
        - Sid: SID-Detection-Workshop
          Effect: Allow
          Principal:
            Service: 
              - events.amazonaws.com
              - inspector.amazonaws.com
          Action: sns:Publish
          Resource: !Ref DetectionSNSTopic
      Topics: 
      - !Ref DetectionSNSTopic

    MyQueue: 
      Type: AWS::SQS::Queue
      Properties: 
        QueueName: "SampleQueue"
 
    SampleSQSPolicy: 
      Type: AWS::SQS::QueuePolicy
      Properties: 
        Queues: 
          - "https://sqs:us-east-2.amazonaws.com/444455556666/queue2"
          - !Ref MyQueue
        PolicyDocument: 
          Statement: 
            - 
              Action: 
                - "SQS:SendMessage" 
                - "SQS:ReceiveMessage"
              Effect: "Allow"
              Resource: "arn:aws:sqs:us-east-2:444455556666:queue2"
              Principal:  
                AWS: 
                  - "111122223333"        

    DeadLetter:
      Type: AWS::SQS::Queue

    RawQueue:
      Type: AWS::SQS::Queue
      Properties:
        DelaySeconds: 0
        # FifoQueue: true
        # QueueName: myname.fifo
        # ContentBasedDeduplication: true
        # KmsDataKeyReusePeriodSeconds: 5
        # KmsMasterKeyId: /aws/kms/sqs
        # MaximumMessageSize: 262,144
        # MessageRetentionPeriod: 1209600
        # ReceiveMessageWaitTimeSeconds: 10
        RedrivePolicy:
          deadLetterTargetArn : !GetAtt DeadLetter.Arn
          maxReceiveCount : 4
        Tags: 
          - Key: Series
            Value: SWS
        VisibilityTimeout: 120

    FreeStorageSpaceAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Minimum FreeStorageSpace alert
        AlarmActions:
        - Ref: ESSNSTopic
        MetricName: FreeStorageSpace
        Namespace: AWS/ES
        Statistic: Minimum
        Period: '60'
        EvaluationPeriods: '1'
        Threshold: '20480'
        ComparisonOperator: LessThanOrEqualToThreshold
        Dimensions:
        - Name: DomainName
          Value:
            Ref: ESDomainName
        - Name: ClientId
          Value:
            Ref: "AWS::AccountId"

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2022-ami-kernel-5.10-arm64'

Resources:
 Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref LatestAmiId


Outputs: